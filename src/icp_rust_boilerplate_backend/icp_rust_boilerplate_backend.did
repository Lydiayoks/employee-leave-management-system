type Employee = record {
id : nat64;
leave_balances : vec record { LeaveName; nat32 };
name : text;
created_at : nat64;
email : text;
};
type EmployeePayload = record { name : text; email : text };
type LeaveName = variant { Sick; Maternity; Annual; Unpaid; Paternity };
type LeaveRequest = record {
id : nat64;
status : LeaveStatusEnum;
leave_type_id : nat64;
end_date : nat64;
created_at : nat64;
start_date : nat64;
employee_id : nat64;
reason : text;
};
type LeaveRequestPayload = record {
leave_type_id : nat64;
end_date : nat64;
start_date : nat64;
employee_id : nat64;
reason : text;
};
type LeaveStatusEnum = variant {
Approved;
Accrued;
Rejected;
Canceled;
Pending;
};
type Message = variant {
Error : text;
InvalidPayload : text;
NotFound : text;
Success : text;
};
type Result = variant { Ok : Message; Err : Message };
type Result_1 = variant { Ok : Employee; Err : Message };
type Result_2 = variant { Ok : LeaveRequest; Err : Message };
type Result_3 = variant { Ok : text; Err : Message };
type Result_4 = variant { Ok : vec Employee; Err : Message };
type Result_5 = variant { Ok : vec LeaveRequest; Err : Message };
service : {
approve_leave_request : (nat64) -> (Result);
cancel_leave_request : (nat64) -> (Result);
create_employee : (EmployeePayload) -> (Result_1);
create_leave_request : (LeaveRequestPayload) -> (Result_2);
generate_leave_report : (nat64) -> (Result_3) query;
get_employees : () -> (Result_4) query;
get_leave_requests : () -> (Result_5) query;
search_employee : (text) -> (Result_4) query;
}